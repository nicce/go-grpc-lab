# This workflow creates a terraform plan on a PR.

on:
  workflow_call:

name: Terraform-Plan-Comment

env:
  # If set to "false" or "0", causes terraform commands to behave as if the
  # -input=false flag was specified.
  TF_INPUT: false

jobs:
  comment-terraform-plan:
    environment: ${{ matrix.env.name }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      id-token: write
      pull-requests: write
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        env:
          - { name: dev }

    steps:
      # Setup environment
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          fetch-depth: 0 # Checkout everything to get access to the tags

      - name: Get version
        id: semantic-version
        run: echo "version=$(scripts/conventional-commits/version.sh)" >> "$GITHUB_OUTPUT"

      - name: Print version
        run: echo "Set version to ${{ steps.semantic-version.outputs.version }}"

      # Setup private module access
      #- name: Private module access
      #  if: ${{ steps.semantic-version.outputs.version != '' }}
      #  run: |
      #    git config --global url."<http-with-token-url>".insteadOf <ssh://git@github.com>

      # Exchange OpenID Connect token with a Google Cloud Platform service account token
      #- name: Acquire Google Cloud Platform token
      #  id: auth
      #  if: ${{ steps.semantic-version.outputs.version != '' }}
      #  uses: google-github-actions/auth@62cf5bd3e4211a0a0b51f2c6d6a37129d828611d # v2.1.5
      #  with:
      #    create_credentials_file: true
      #    workload_identity_provider: <workload-identity-provider>
      #    service_account: <service-account>

      # Terraform Setup
      - name: Terraform Setup
        if: ${{ steps.semantic-version.outputs.version != '' }}
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: "1.6.3"

      # Docker Info
      - name: Docker Info
        id: docker-info
        if: ${{ steps.semantic-version.outputs.version != '' }}
        run: echo "image-name=$(make docker-info)" >> "$GITHUB_OUTPUT"
        env:
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          REVISION: ${{ steps.semantic-version.outputs.version }}

      - name: Terraform plan
        id: terraform-plan
        continue-on-error: true # needed to post plan that fails
        if: ${{ steps.semantic-version.outputs.version != '' }}
        #run: |
        #  ./scripts/terraform.sh ${{ matrix.env.name }} plan \
        #    -var image_ref=${{ steps.docker-info.outputs.image-name }} \
        #    -no-color \
        #    -lock=false \
        #    -out=${{ matrix.env.name}}-tfplan.tmp
        run: echo "ðŸš€ Terraform plan"

      - name: Terraform show
        id: terraform-show
        continue-on-error: true # needed to post plan that fails
        if: ${{ steps.semantic-version.outputs.version != '' }}
        run: echo "ðŸš€ Terraform show"
        #run: |
        #  ./scripts/terraform.sh ${{ matrix.env.name }} show \
        #    -no-color \
        #    ${{ matrix.env.name }}-tfplan.tmp | awk "/terraform show/,0" >"${GITHUB_WORKSPACE}"/${{ matrix.env.name }}-tfplan
        env:
          NO_VARS: true

      # Post Plan to GitHub PR
      - name: Add comment on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        if: ${{ steps.semantic-version.outputs.version != '' }}
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            const content = `
            terraform plan:
            \`\`\`terraform
            this is the plan with the potentiall new version: ${{ steps.semantic-version.outputs.version }}
            \`\`\`
            `
            const author = "nicce"
            const header = "# Tentative terraform-plan-${{ matrix.env.name }}"
            const script = require('./scripts/upsert-comment-on-pr.js')
            script(github, context, author, header, content)
